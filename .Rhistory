devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_vignette("my-vignette")
devtools::document()
library(rKIN)
setwd("D:/Avdata/KrisParker")
C12_UWdata<- read.table(file="12C_UW.txt", header=TRUE, sep="\t", as.is=TRUE)
C12_Wdata<- read.table(file="12C_W.txt", header=TRUE, sep="\t", as.is=TRUE)
View(C12_UWdata)
RE_C12_W<- read.table(file="RE_12C_W.txt", header=TRUE, sep="\t", as.is=TRUE)
RE_C12_UW<- read.table(file="RE_12C_UW.txt", header=TRUE, sep="\t", as.is=TRUE)
names(C12_UWdata)
estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="GenoType")
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="GenoType")
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="MouseOrigin")
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="MouseOrigin", smallSamp = TRUE)
library(rKIN)
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="MouseOrigin", smallSamp = TRUE)
library(rKIN)
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="MouseOrigin", smallSamp = TRUE)
?table
table(C12_UWdata$MouseOrigin)
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="Age", smallSamp = TRUE)
table(C12_UWdata$Age)
plotKIN(est)
plotKIN(est)
length(estObj$estObj)
View(gdf)
length(estObj$estObj)
View(gdf)
estObj$estObj
str(estObj$estObj)
names(estObj$estObj)
names(estObj$estInput)
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}#
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
i=2
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}# close j loop
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
i=2
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}#
plotKIN(est)
xs<- numeric()
ys<- numeric()
df<- list()
#Loop through the polygons
for(i in 1:length(estObj$estObj)){
#xs<- c(xs, sp::bbox(estObj$estObj[[i]])[1, ])
#ys<- c(ys, sp::bbox(estObj$estObj[[i]])[2, ])
# Create new column to set the drawing order in ggplot, largest CI first
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}# close j loop
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
}# close i loop
plotKIN(est)
for(i in 1:length(estObj$estObj)){
#xs<- c(xs, sp::bbox(estObj$estObj[[i]])[1, ])
#ys<- c(ys, sp::bbox(estObj$estObj[[i]])[2, ])
# Create new column to set the drawing order in ggplot, largest CI first
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}# close j loop
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
}#
for(i in 1:length(estObj$estObj)){
#xs<- c(xs, sp::bbox(estObj$estObj[[i]])[1, ])
#ys<- c(ys, sp::bbox(estObj$estObj[[i]])[2, ])
# Create new column to set the drawing order in ggplot, largest CI first
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}# close j loop
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
}# close i loop
plotKIN(est)
xs<- numeric()
ys<- numeric()
df<- list()
#Loop through the polygons
for(i in 1:length(estObj$estObj)){
#xs<- c(xs, sp::bbox(estObj$estObj[[i]])[1, ])
#ys<- c(ys, sp::bbox(estObj$estObj[[i]])[2, ])
# Create new column to set the drawing order in ggplot, largest CI first
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}# close j loop
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
}# close i loop
estObj=est
scaler = 1
alpha = 0.3
title = ""
xlab = "x"
ylab = "y"
ord<- unique(estObj$estObj[[1]]@data$ConfInt)[order(unique(estObj$estObj[[1]]@data$ConfInt), decreasing = TRUE)]
xs<- numeric()
ys<- numeric()
df<- list()
for(i in 1:length(estObj$estObj)){
#xs<- c(xs, sp::bbox(estObj$estObj[[i]])[1, ])
#ys<- c(ys, sp::bbox(estObj$estObj[[i]])[2, ])
# Create new column to set the drawing order in ggplot, largest CI first
for(j in 1:length(ord)){
estObj$estObj[[i]]@data$PlotOrder[estObj$estObj[[i]]@data$ConfInt==ord[j]]<- j
}# close j loop
gdf<- ggplot2::fortify(estObj$estObj[[i]], region = "PlotOrder")
gdf<- merge(gdf, estObj$estObj[[i]]@data, by.x = "id", by.y = "PlotOrder")
gdf$Group_ConfInt<- paste(gdf$Group, gdf$ConfInt, sep = "_")
df<- c(df, list(gdf))
}# cl
pts<- list()
for(i in 1:length(estObj$estInput)){
#place all points into one data.frame for plotting
pts<- c(pts, estObj$estInput[[i]]@data)
}# c
estObj$estInput[[i]]@data[ , 3]
estObj$estInput[[i]]@data[ , 4]
pts<- list()
for(i in 1:length(estObj$estInput)){
#place all points into data.frame list for plotting
pts<- c(pts, estObj$estInput[[i]]@data)
#store all coordinates for later use
xs<- c(xs, estObj$estInput[[i]]@data[ , 3])
ys<- c(ys, estObj$estInput[[i]]@data[ , 4])
}# clo
names(x)[3]
kin.plot<- ggplot2::ggplot() +
lapply(df, function(x) ggplot2::geom_polygon(data = x, alpha = alpha, ggplot2::aes_string(x = "long", y = "lat", fill = "Group_ConfInt", group = "group"))) +
scale_fill_manual(values=getColors(length(df), length(ord))) +
#ggplot2::geom_point(data = pts, aes_string(x = names(pts)[3], y = names(pts)[4], colour = "Group", shape = "Group")) +
lapply(pts, function(x) ggplot2::geom_point(data = x, ggplot2::aes_string(x = names(x)[3], y = names(x)[4], colour = "Group", shape = "Group"))) +
ggplot2::scale_color_manual(values = getColors(length(df), 1)) +
ggplot2::coord_fixed(ratio = ((max(xs) + scaler) - (min(xs) - scaler))/((max(ys) + scaler) - (min(ys) - scaler)),
xlim = c((min(xs) - scaler), (max(xs) + scaler)),
ylim = c((min(ys) - scaler), (max(ys) + scaler))) +
ggplot2::scale_x_continuous(breaks = seq(from = round((min(xs) - scaler)), to = round((max(xs) + scaler)), by = scaler)) +
ggplot2::scale_y_continuous(breaks = seq(from = round((min(ys) - scaler)), to = round((max(ys) + scaler)), by = scaler)) +
ggplot2::labs(title = title, x = xlab, y = ylab) +
ggplot2::guides(fill = ggplot2::guide_legend(override.aes = list(alpha = alpha))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.background = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.border= ggplot2::element_rect(fill = NA, color = "black"))
kin.plot<- ggplot2::ggplot() +
lapply(df, function(x) ggplot2::geom_polygon(data = x, alpha = alpha, ggplot2::aes_string(x = "long", y = "lat", fill = "Group_ConfInt", group = "group"))) +
ggplot2::scale_fill_manual(values=getColors(length(df), length(ord))) +
#ggplot2::geom_point(data = pts, aes_string(x = names(pts)[3], y = names(pts)[4], colour = "Group", shape = "Group")) +
lapply(pts, function(x) ggplot2::geom_point(data = x, ggplot2::aes_string(x = names(x)[3], y = names(x)[4], colour = "Group", shape = "Group"))) +
ggplot2::scale_color_manual(values = getColors(length(df), 1)) +
ggplot2::coord_fixed(ratio = ((max(xs) + scaler) - (min(xs) - scaler))/((max(ys) + scaler) - (min(ys) - scaler)),
xlim = c((min(xs) - scaler), (max(xs) + scaler)),
ylim = c((min(ys) - scaler), (max(ys) + scaler))) +
ggplot2::scale_x_continuous(breaks = seq(from = round((min(xs) - scaler)), to = round((max(xs) + scaler)), by = scaler)) +
ggplot2::scale_y_continuous(breaks = seq(from = round((min(ys) - scaler)), to = round((max(ys) + scaler)), by = scaler)) +
ggplot2::labs(title = title, x = xlab, y = ylab) +
ggplot2::guides(fill = ggplot2::guide_legend(override.aes = list(alpha = alpha))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.background = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.border= ggplot2::element_rect(fill = NA, color = "black"))
View(gdf)
estObj$estObj[[i]]@data$PlotOrder
estObj$estInput[[i]]
pf<- ggplot2::fortify(estObj$estInput[[i]], region = "Group")
pts[[1]]
pts<- list()
for(i in 1:length(estObj$estInput)){
#place all points into data.frame list for plotting
#pf<- ggplot2::fortify(estObj$estInput[[i]], region = "Group")
pts<- c(pts, estObj$estInput[[i]]@data)
#store all coordinates for later use
xs<- c(xs, estObj$estInput[[i]]@data[ , 3])
ys<- c(ys, estObj$estInput[[i]]@data[ , 4])
}# cl
pts
estObj$estInput[[i]]@data
pts<- list()
for(i in 1:length(estObj$estInput)){
#place all points into data.frame list for plotting
#pf<- ggplot2::fortify(estObj$estInput[[i]], region = "Group")
pts<- c(pts, list(estObj$estInput[[i]]@data))
#store all coordinates for later use
xs<- c(xs, estObj$estInput[[i]]@data[ , 3])
ys<- c(ys, estObj$estInput[[i]]@data[ , 4])
}# clo
pts
kin.plot<- ggplot2::ggplot() +
lapply(df, function(x) ggplot2::geom_polygon(data = x, alpha = alpha, ggplot2::aes_string(x = "long", y = "lat", fill = "Group_ConfInt", group = "group"))) +
ggplot2::scale_fill_manual(values=getColors(length(df), length(ord))) +
#ggplot2::geom_point(data = pts, aes_string(x = names(pts)[3], y = names(pts)[4], colour = "Group", shape = "Group")) +
lapply(pts, function(x) ggplot2::geom_point(data = x, ggplot2::aes_string(x = names(x)[3], y = names(x)[4], colour = "Group", shape = "Group"))) +
ggplot2::scale_color_manual(values = getColors(length(df), 1)) +
ggplot2::coord_fixed(ratio = ((max(xs) + scaler) - (min(xs) - scaler))/((max(ys) + scaler) - (min(ys) - scaler)),
xlim = c((min(xs) - scaler), (max(xs) + scaler)),
ylim = c((min(ys) - scaler), (max(ys) + scaler))) +
ggplot2::scale_x_continuous(breaks = seq(from = round((min(xs) - scaler)), to = round((max(xs) + scaler)), by = scaler)) +
ggplot2::scale_y_continuous(breaks = seq(from = round((min(ys) - scaler)), to = round((max(ys) + scaler)), by = scaler)) +
ggplot2::labs(title = title, x = xlab, y = ylab) +
ggplot2::guides(fill = ggplot2::guide_legend(override.aes = list(alpha = alpha))) +
ggplot2::theme_bw() +
ggplot2::theme(panel.background = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.border= ggplot2::element_rect(fill = NA, color = "black"))
kin.plot
getColors<- function(groups, levels){
orange<- c("#8c2d04", "#d94801", "#f16913", "#fd8d3c", "#fdae6b", "#fdd0a2", "#feedde")
purple<- c("#4a1486", "#6a51a3", "#807dba", "#9e9ac8", "#bcbddc", "#dadaeb", "#f2f0f7")
green<- c("#005a32", "#238b45", "#41ab5d", "#74c476", "#a1d99b", "#c7e9c0", "#edf8e9")
red<- c("#99000d", "#cb181d", "#ef3b2c", "#fb6a4a", "#fc9272", "#fcbba1", "#fee5d9")
blue<- c("#084594", "#2171b5", "#4292c6", "#6baed6", "#9ecae1", "#c6dbef", "#eff3ff")
black<- c("#252525", "#525252", "#737373", "#969696", "#bdbdbd", "#d9d9d9", "#f7f7f7")
colorList<- list(orange, purple, green, red, blue, black)
#create vector to hold ordered colors
fill<- character()
for(i in 1:groups){
fill<- c(fill, colorList[[i]][1:levels])
}
return(fill)
}
kin.plot
library(rKIN)
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="Age", smallSamp = TRUE)
plotKIN(est)
library(rKIN)
est<- estEllipse(C12_UWdata, x="Axis.1", y="Axis.2", group="Age", smallSamp = TRUE)
plotKIN(est)
data("rodents")
test.elp<- estEllipse(data=rodents, x="Ave_C", y="Ave_N", group="Species",
levels=c(50, 75, 95))
plotKIN(test.elp, scaler=2, title="Ellipse Estimates", xlab="Ave_C", ylab="Ave_N")
View(rodents)
test.elp<- estEllipse(data=rodents, x="Ave_C", y="Ave_N", group="Habitat",
levels=c(50, 75, 95))
plotKIN(test.elp, scaler=2, title="Ellipse Estimates", xlab="Ave_C", ylab="Ave_N")
table(rodents)
table(rodents$Habitat)
library(rKIN)
library(rKIN)
test.elp<- estEllipse(data=rodents, x="Ave_C", y="Ave_N", group="Habitat",
levels=c(50, 75, 95))
plotKIN(test.elp, scaler=2, title="Ellipse Estimates", xlab="Ave_C", ylab="Ave_N")
devtools::build_win()
require(devtools)
devtools::build_win()
devtools::use_testthat()
devtools::check()
devtools::document()
devtools::use_testthat()
devtools::use_testthat()
(rodents)
("rodents")
data("rodents")
min(rodents$Ave_C)
max(rodents$Ave_C)
max(rodents$Ave_C[rodents$Species="Species1"])
max(rodents$Ave_C[rodents$Species=="Species1"])
max(rodents$Ave_C[rodents$Species=="Species2
"])
max(rodents$Ave_C[rodents$Species=="Species2"])
min(rodents$Ave_N)
max(rodents$Ave_N)
dat1<- data.frame(Species = c("Spec1", "Spec1", "Spec1", "Spec1", "Spec1", "Spec1", "Spec1", "Spec1", "Spec1", "Spec1",
"Spec2", "Spec2", "Spec2", "Spec2", "Spec2", "Spec2", "Spec2", "Spec2", "Spec2", "Spec2"),
C13 = c(runif(10, min = -30, max = -20), runif(10, min = -30, max = -20)),
N15 = c(runif(10, min = -3, max = 8), runif(10, min = -3, max = 8)))
View(dat1)
dat0<- data.frame(Species = c(rep("Spec1", times = 2), rep("Spec2", times = 10)),
C13 = c(runif(2, min = -30, max = -20), runif(10, min = -30, max = -20)),
N15 = c(runif(2, min = -3, max = 8), runif(10, min = -3, max = 8)))
View(dat0)
dat1<- data.frame(Species = c(rep("Spec1", times = 10), rep("Spec2", times = 10)),
C13 = c(runif(10, min = -30, max = -20), runif(10, min = -30, max = -20)),
N15 = c(runif(10, min = -3, max = 8), runif(10, min = -3, max = 8)))
dat1<- data.frame(Species = c(rep("Spec1", times = 3), rep("Spec2", times = 3)),
C13 = c(runif(3, min = -30, max = -20), runif(3, min = -30, max = -20)),
N15 = c(runif(3, min = -3, max = 8), runif(3, min = -3, max = 8)))
#Minimum with small samp = FALSE, default behavior
dat2<- data.frame(Species = c(rep("Spec1", times = 10), rep("Spec2", times = 10)),
C13 = c(runif(10, min = -30, max = -20), runif(10, min = -30, max = -20)),
N15 = c(runif(10, min = -3, max = 8), runif(10, min = -3, max = 8)))
context("Check Estimators")
library(testthat)
library(rKIN)
context("Check Estimators")
library(rKIN)
datM<- as.matrix(data.frame(Species = c(rep("Spec1", times = 2), rep("Spec2", times = 10)),
C13 = c(runif(2, min = -30, max = -20), runif(10, min = -30, max = -20)),
N15 = c(runif(2, min = -3, max = 8), runif(10, min = -3, max = 8))))
View(datM)
estMCP(data = datM, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
install.packages("ggThemeAssist")
data=rodents
names(data)
x="Ave_C"
x %in% names(data)
x="Ave_"
x %in% names(data)
if(x %in% names(data == FALSE))
stop("The value of x does not appear to be a valid column name!")
estMCP(data = datM, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
estMCP(data = dat0, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
estMCP(data = dat0, x = "C1", y = "N15", group = "Species", smallSamp = FALSE)
estMCP(data = dat0, x = "C1", y = "N15", group = "Species", smallSamp = FALSE)
x %in% names(data)
library(rKIN)
estMCP(data = dat0, x = "C1", y = "N15", group = "Species", smallSamp = FALSE)
estMCP(data = dat1, x = "C13", y = "N15", group = "Species", smallSamp = TRUE)
mytest<- estMCP(data = dat1, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
mytest<- estMCP(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
class(mytest)
class(mytest[[1]])
class(mytest[[2]])
expect_output(estMCP(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE))
expect_output(estMCP(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE), regexp = NA)
expect_error(getArea(datm), info = "estObj data check")
expect_output(getArea(testMCP), regexp = NA, info = "estObj data check, should succeed")
testMCP<- estMCP(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
testMCP<- estMCP(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
expect_output(getArea(testMCP), regexp = NA, info = "estObj data check, should succeed")
testKin<- estKIN(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
plotKIN(testKin)
testKin<- estKIN(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE, scaler = 4)
plotKIN(testKin, scaler = 4)
plot(testKin[[2]])
plot(testKin[[2]][1])
testKin
testKin[[2]][1]
str(testKin)
plot(testKin$estObj)
plot(testKin$estObj$Spec1)
plot(testKin$estObj$Spec2)
plot(testKin$estObj$Spec2, col="red")
testKin$estObj$Spec2@polygons
plot(testKin$estObj$Spec2@polygons[[1]])
plot(testKin$estObj$Spec2@polygons[[1]][1])
testKin$estObj$Spec2@polygons[[1]][1]
length(testKin$estObj$Spec2@polygons)
testKin$estObj$Spec2@polygons[[1]]
testKin$estObj$Spec2@data
testKin$estObj$Spec2[1,]
plot(testKin$estObj$Spec2[1,])
plot(testKin$estObj$Spec2[2,])
plot(testKin$estObj$Spec2[3,])
plot(testKin$estObj$Spec2[2,])
testKin$estObj$Spec2@polygons[[2]]
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[1,], testKin$estObj$Spec2[2,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[1,], testKin$estObj$Spec2[3,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[2,], testKin$estObj$Spec2[3,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[3,], testKin$estObj$Spec2[3,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[3,], testKin$estObj$Spec2[2,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[3,], testKin$estObj$Spec2[1,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[1,], testKin$estObj$Spec1[1,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[1,], testKin$estObj$Spec1[2,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[1,], testKin$estObj$Spec1[3,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[2,], testKin$estObj$Spec1[1,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[2,], testKin$estObj$Spec1[2,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[2,], testKin$estObj$Spec1[3,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[3,], testKin$estObj$Spec1[3,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[3,], testKin$estObj$Spec1[2,])
g.int<- rgeos::gIntersection(testKin$estObj$Spec2[3,], testKin$estObj$Spec1[1,])
expect_output(calcOverlap(testKin), regexp = NA, info = "estObj data check, should succeed")
expect_output(estKIN(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE), regexp = NA, info = "MCP Should be successful")
testKin<- estMCP(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
testKin<- estKIN(data = dat2, x = "C13", y = "N15", group = "Species", smallSamp = FALSE)
plotKIN(testKin, scaler = 4)
testKin<- estKIN(data = dat2, x = "C13", y = "N15", group = "Species", scaler = 4, smallSamp = FALSE)
plotKIN(testKin, scaler = 4)
expect_output(estKIN(data = dat1, x = "C13", y = "N15", group = "Species", smallSamp = TRUE, scaler = 10), regexp = NA, info = "KIN Should be successful")
testKin<- estKIN(data = dat1, x = "C13", y = "N15", group = "Species", scaler = 4, smallSamp = FALSE)
testKin<- estKIN(data = dat1, x = "C13", y = "N15", group = "Species", scaler = 4, smallSamp = TRUE)
plotKIN(testKin, scaler = 4)
testKin<- estKIN(data = dat1, x = "C13", y = "N15", group = "Species", scaler = 10, smallSamp = TRUE)
plotKIN(testKin, scaler = 10)
testKin<- estKIN(data = dat1, x = "C13", y = "N15", group = "Species", scaler = 5, smallSamp = TRUE)
plotKIN(testKin, scaler = 10)
plotKIN(testKin, scaler = 5)
expect_output(plotKIN(testMCP), regexp = NA, info = "estObj data check, should succeed")
require(rKIN)
require("rKIN")
library(rKIN)
install.packages("salbeke/rKIN")
require(devtools)
devtools::install_github("salbeke/rKIN")
library(rKIN)
data("rodents")
head(rodents)
test.kin<- estKIN(data=rodents, x="Ave_C", y="Ave_N", group="Species",
levels=c(50, 75, 95), scaler=2)
kin.area<- getArea(test.kin)
kin.area
kin.olp<- calcOverlap(test.kin)
warnings()
kin.olp
plotKIN(test.kin, title="Test Kernel UD", x="Ave_C", y="Ave_N")
test.elp<- estEllipse(data=rodents, x="Ave_C", y="Ave_N", group="Species", levels=c(50, 75, 95))
sessionInfo()
sessionInfo
sessionInfo()
library(rKIN)
data("rodents")
head(rodents)
test.kin<- estKIN(data=rodents, x="Ave_C", y="Ave_N", group="Species",
levels=c(50, 75, 95), scaler=2)
kin.area<- getArea(test.kin)
kin.area
kin.olp<- calcOverlap(test.kin)
kin.olp
plotKIN(test.kin, title="Test Kernel UD", x="Ave_C", y="Ave_N")
plotKIN(test.kin, title="Test Kernel UD", xlab="Ave_C", ylab="Ave_N")
class(test.kin)
View(test.kin)
View(test.kin$estInput)
View(test.kin$estInput$data)
View(test.kin$estInput.data)
View(test.kin$estInput)
devtools::document()
usethis::use_package_doc()
rKIN?
rKIN
rKIN?usethis
devtools::document()
devtools::document()
library(rKIN)
rKIN?usethis
rKIN
rKIN?
rKIN?usethis
package?rKIN
package?terra
package?rKIN
install.packages("rKIN")
install.packages("rKIN")
package?RNGkind()
package?rKIN
package?terra
devtools::document()
install.packages("rKIN")
install.packages("rKIN")
package?rKIN
devtools::document()
install.packages("rKIN")
install.packages("rKIN")
package?rKIN
help()
help(rKIN)
help(terra)
help("rKIN")
help(package = "rKIN")
devtools::build()
devtools::check()
devtools::submit_cran()
Version()
R.Version()
devtools::check()
install.packages("devtools")
devtools::check()
devtools::check()
R.Version()
devtools::check()
install.packages("sf")
devtools::check()
install.packages("sp")\
install.packages("sp")\
install.packages("sp")
install.packages("sf")
install.packages("classInt")
remove.packages("classInt")
install.packages("classInt")
install.packages("sf")
library(usethis)
library(clipr)
devtools::check()
devtools::check_rhub()
devtools::check()
devtools::submit_cran()
